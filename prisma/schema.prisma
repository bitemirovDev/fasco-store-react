generator client {
  provider = "prisma-client-js"
}

// куда подключаемся
datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  image         String?
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?
  accounts      Account[]

  ProductReview ProductReview[]
  Cart          Cart?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model ConfirmationCode {
  id      String   @id @default(cuid())
  email   String   @unique
  code    String
  expires DateTime

  createdAt DateTime @default(now())

  // @@id([identifier, token])
  @@map("confirmation_codes")
}

model CustomerReview {
  id         String @id @default(cuid())
  name       String
  avatar     String
  review     String
  rating     Float
  profession String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customer_reviews")
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] @relation("ProductCategories")

  @@map("product_categories")
}

model ProductDiscount {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  percent  Int
  products Product[]

  endDate DateTime @default("2025-03-15T23:59:59Z")

  @@map("product_discounts")
}

model ProductCollection {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] @relation("ProductCollections")

  @@map("product_collections")
}

model Product {
  id          String              @id @default(cuid())
  img         Json
  name        String
  price       Float
  rating      Float               @default(0.00)
  stock       Int                 @default(0)
  collections ProductCollection[] @relation("ProductCollections")
  categories  ProductCategory[]   @relation("ProductCategories")
  sizes       ProductSize[]
  brand       ProductBrand        @relation(fields: [brandId], references: [id])
  brandId     Int
  discount    ProductDiscount?    @relation(fields: [discountId], references: [id])
  discountId  Int?
  reviews     ProductReview[]
  cartItems   CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model ProductReview {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  review    String?
  rating    Float   @default(0.00)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_reviews")
}

model ProductBrand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  @@map("product_brands")
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  name      String
  quantity  Int     @default(0)

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, name])
  @@map("product_sizes")
}

model Cart {
  id        String     @id @default(cuid())
  user      User?      @relation(fields: [userId], references: [id])
  subtotal  Float      @default(0.00)
  cartItems CartItem[]

  userId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model CartItem {
  id          String @id @default(cuid())
  quantity    Int
  price       Float
  name        String
  img         String
  totalAmount Float

  productId String
  sizeId    Int
  cartId    String

  cart    Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  size    ProductSize @relation(fields: [sizeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, sizeId])
  @@map("cart_items")
}

// model Order {
//   id          Int         @id @default(autoincrement())
//   user        User?       @relation(fields: [userId], references: [id])
//   userId      Int
//   totalAmount Float
//   status      OrderStatus
//   paymentId   String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// enum OrderStatus {
//   PENDING
//   COMPLETED
//   CANCELLED
// }
