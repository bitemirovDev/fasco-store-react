
generator client {
    provider = "prisma-client-js"
}

// куда подключаемся
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int @id @default(autoincrement())
  fullName  String
  email     String @unique
  password  String
  avatar    String?
  cart      Cart?
  orders    Order[] 
  review    Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomerReview {
  id          Int @id @default(autoincrement())
  name        String
  avatar      String
  review      String
  rating      Float
  profession  String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id        Int @id @default(autoincrement())
  name      String @unique
  products  Product[] @relation("ProductCategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discount {
  id        Int @id @default(autoincrement())
  name      String @unique
  percent   Int
  products  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id          Int @id @default(autoincrement())
  name        String @unique
  products    Product[] @relation("ProductCollections")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id              Int @id @default(autoincrement())
  img             ProductImage? @relation("ProductImageRelation")
  name            String
  price           Float
  rating          Float @default(0.00)
  stock           Int
  collections     Collection[] @relation("ProductCollections")
  categories      Category[] @relation("ProductCategories")
  availableSizes  AvailableSize[]
  brand           Brand @relation(fields: [brandId], references: [id])
  brandId         Int
  discount        Discount? @relation(fields: [discountId], references: [id])
  discountId      Int?
  cartItems       CartItem[]
  reviews         Review[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Review {
  id          Int @id @default(autoincrement())
  product     Product @relation(fields: [productId], references: [id])
  productId   Int
  user        User @relation(fields: [userId], references: [id])
  userId      Int
  review      String?
  rating      Float @default(0.00)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductImage {
  id          Int @id @default(autoincrement())
  product     Product @relation("ProductImageRelation", fields: [productId], references: [id])
  productId   Int @unique 
  main        String
  second      String?
  third       String?
  fourth      String?
}

model Brand {
  id          Int @id @default(autoincrement())
  name        String @unique
  products    Product[]

  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt
}

model Size{
  id              Int @id @default(autoincrement())
  name            String @unique
  availableSizes  AvailableSize[]
  cartItems       CartItem[]

  createdAt       DateTime @default(now())  
  updatedAt       DateTime @updatedAt
}

model AvailableSize {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  size       Size     @relation(fields: [sizeId], references: [id])
  sizeId     Int
  stock      Int      @default(0)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, sizeId])  // Запрещает дублирование одной и той же связки product + size
}

model Cart {
  id          Int @id @default(autoincrement())
  user        User? @relation(fields: [userId], references: [id])
  userId      Int? @unique
  totalAmount Float @default(0.00)
  token       String
  cartItems   CartItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CartItem {
  id          Int @id @default(autoincrement())
  cart        Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId      Int
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  size        Size? @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  sizeId      Int? // Может быть null, если у товара нет размеров (например, аксессуары)
  quantity    Int

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([cartId, productId, sizeId]) // Один товар одного размера в корзине не должен дублироваться
}

model Order {
  id          Int @id @default(autoincrement())
  user        User? @relation(fields: [userId], references: [id])
  userId      Int? @unique
  totalAmount Int 
  status      OrderStatus
  paymentId   String?
  items       Json
  fisrtName   String
  lastName    String
  email       String
  address     String
  postalCode  String
  country     String
  city        String
  phone       String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}