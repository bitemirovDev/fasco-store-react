
generator client {
    provider = "prisma-client-js"
}

// куда подключаемся
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int @id @default(autoincrement())
  fullName  String
  email     String @unique
  password  String
  cart      Cart?
  orders     Order[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int @id @default(autoincrement())
  name      String @unique
  products  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id        Int @id @default(autoincrement())
  name      String?
  percent   Int

  products  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id          Int @id @default(autoincrement())
  name        String @unique
  products     Product[] @relation("ProductTags")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          Int @id @default(autoincrement())
  img         String
  name        String
  price       Float
  rating      Float @default(0.0)
  stock       Int
  tags        Tag[] @relation("ProductTags")

  brand       Brand? @relation(fields: [brandId], references: [id])
  brandId     Int?
  
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int

  sale        Sale? @relation(fields: [saleId], references: [id])
  saleId      Int?

  sizes       Size[] @relation("ProductSizes")

  cartItems   CartItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Brand {
  id          Int @id @default(autoincrement())
  name        String? @unique
  products    Product[]

  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt
}

model Size{
  id          Int @id @default(autoincrement())
  name        String @unique

  products    Product[] @relation("ProductSizes")
  
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt
}

model Cart {
  id          Int @id @default(autoincrement())

  user        User? @relation(fields: [userId], references: [id])
  userId      Int? @unique

  totalAmount Int @default(0)

  cartItems   CartItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CartItem {
  id          Int @id @default(autoincrement())

  cart        Cart @relation(fields: [cartId], references: [id])
  cartId      Int

  product     Product @relation(fields: [productId], references: [id])
  productId   Int

  quantity    Int @default(1)
  totalAmount Int @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          Int @id @default(autoincrement())

  user        User? @relation(fields: [userId], references: [id])
  userId      Int? @unique

  totalAmount Int 

  status      OrderStatus
  paymentId   String?

  items       Json

  fisrtName   String
  lastName    String
  email       String
  address     String
  postalCode  String
  country     String
  city        String
  phone       String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}